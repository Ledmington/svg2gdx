/*
 * svg2gdx - A converter from SVG to LibGDX ShapeRenderer code.
 * Copyright (C) 2023-2024 Filippo Barbari <filippo.barbari@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.ledmington.svg2gdx;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

public final class TestParseUtils {

    private static Stream<Arguments> values() {
        return Stream.of(
                Arguments.of("00", (byte) 0x00),
                Arguments.of("01", (byte) 0x01),
                Arguments.of("02", (byte) 0x02),
                Arguments.of("03", (byte) 0x03),
                Arguments.of("04", (byte) 0x04),
                Arguments.of("05", (byte) 0x05),
                Arguments.of("06", (byte) 0x06),
                Arguments.of("07", (byte) 0x07),
                Arguments.of("08", (byte) 0x08),
                Arguments.of("09", (byte) 0x09),
                Arguments.of("0a", (byte) 0x0a),
                Arguments.of("0b", (byte) 0x0b),
                Arguments.of("0c", (byte) 0x0c),
                Arguments.of("0d", (byte) 0x0d),
                Arguments.of("0e", (byte) 0x0e),
                Arguments.of("0f", (byte) 0x0f),
                Arguments.of("10", (byte) 0x10),
                Arguments.of("11", (byte) 0x11),
                Arguments.of("12", (byte) 0x12),
                Arguments.of("13", (byte) 0x13),
                Arguments.of("14", (byte) 0x14),
                Arguments.of("15", (byte) 0x15),
                Arguments.of("16", (byte) 0x16),
                Arguments.of("17", (byte) 0x17),
                Arguments.of("18", (byte) 0x18),
                Arguments.of("19", (byte) 0x19),
                Arguments.of("1a", (byte) 0x1a),
                Arguments.of("1b", (byte) 0x1b),
                Arguments.of("1c", (byte) 0x1c),
                Arguments.of("1d", (byte) 0x1d),
                Arguments.of("1e", (byte) 0x1e),
                Arguments.of("1f", (byte) 0x1f),
                Arguments.of("20", (byte) 0x20),
                Arguments.of("21", (byte) 0x21),
                Arguments.of("22", (byte) 0x22),
                Arguments.of("23", (byte) 0x23),
                Arguments.of("24", (byte) 0x24),
                Arguments.of("25", (byte) 0x25),
                Arguments.of("26", (byte) 0x26),
                Arguments.of("27", (byte) 0x27),
                Arguments.of("28", (byte) 0x28),
                Arguments.of("29", (byte) 0x29),
                Arguments.of("2a", (byte) 0x2a),
                Arguments.of("2b", (byte) 0x2b),
                Arguments.of("2c", (byte) 0x2c),
                Arguments.of("2d", (byte) 0x2d),
                Arguments.of("2e", (byte) 0x2e),
                Arguments.of("2f", (byte) 0x2f),
                Arguments.of("30", (byte) 0x30),
                Arguments.of("31", (byte) 0x31),
                Arguments.of("32", (byte) 0x32),
                Arguments.of("33", (byte) 0x33),
                Arguments.of("34", (byte) 0x34),
                Arguments.of("35", (byte) 0x35),
                Arguments.of("36", (byte) 0x36),
                Arguments.of("37", (byte) 0x37),
                Arguments.of("38", (byte) 0x38),
                Arguments.of("39", (byte) 0x39),
                Arguments.of("3a", (byte) 0x3a),
                Arguments.of("3b", (byte) 0x3b),
                Arguments.of("3c", (byte) 0x3c),
                Arguments.of("3d", (byte) 0x3d),
                Arguments.of("3e", (byte) 0x3e),
                Arguments.of("3f", (byte) 0x3f),
                Arguments.of("40", (byte) 0x40),
                Arguments.of("41", (byte) 0x41),
                Arguments.of("42", (byte) 0x42),
                Arguments.of("43", (byte) 0x43),
                Arguments.of("44", (byte) 0x44),
                Arguments.of("45", (byte) 0x45),
                Arguments.of("46", (byte) 0x46),
                Arguments.of("47", (byte) 0x47),
                Arguments.of("48", (byte) 0x48),
                Arguments.of("49", (byte) 0x49),
                Arguments.of("4a", (byte) 0x4a),
                Arguments.of("4b", (byte) 0x4b),
                Arguments.of("4c", (byte) 0x4c),
                Arguments.of("4d", (byte) 0x4d),
                Arguments.of("4e", (byte) 0x4e),
                Arguments.of("4f", (byte) 0x4f),
                Arguments.of("50", (byte) 0x50),
                Arguments.of("51", (byte) 0x51),
                Arguments.of("52", (byte) 0x52),
                Arguments.of("53", (byte) 0x53),
                Arguments.of("54", (byte) 0x54),
                Arguments.of("55", (byte) 0x55),
                Arguments.of("56", (byte) 0x56),
                Arguments.of("57", (byte) 0x57),
                Arguments.of("58", (byte) 0x58),
                Arguments.of("59", (byte) 0x59),
                Arguments.of("5a", (byte) 0x5a),
                Arguments.of("5b", (byte) 0x5b),
                Arguments.of("5c", (byte) 0x5c),
                Arguments.of("5d", (byte) 0x5d),
                Arguments.of("5e", (byte) 0x5e),
                Arguments.of("5f", (byte) 0x5f),
                Arguments.of("60", (byte) 0x60),
                Arguments.of("61", (byte) 0x61),
                Arguments.of("62", (byte) 0x62),
                Arguments.of("63", (byte) 0x63),
                Arguments.of("64", (byte) 0x64),
                Arguments.of("65", (byte) 0x65),
                Arguments.of("66", (byte) 0x66),
                Arguments.of("67", (byte) 0x67),
                Arguments.of("68", (byte) 0x68),
                Arguments.of("69", (byte) 0x69),
                Arguments.of("6a", (byte) 0x6a),
                Arguments.of("6b", (byte) 0x6b),
                Arguments.of("6c", (byte) 0x6c),
                Arguments.of("6d", (byte) 0x6d),
                Arguments.of("6e", (byte) 0x6e),
                Arguments.of("6f", (byte) 0x6f),
                Arguments.of("70", (byte) 0x70),
                Arguments.of("71", (byte) 0x71),
                Arguments.of("72", (byte) 0x72),
                Arguments.of("73", (byte) 0x73),
                Arguments.of("74", (byte) 0x74),
                Arguments.of("75", (byte) 0x75),
                Arguments.of("76", (byte) 0x76),
                Arguments.of("77", (byte) 0x77),
                Arguments.of("78", (byte) 0x78),
                Arguments.of("79", (byte) 0x79),
                Arguments.of("7a", (byte) 0x7a),
                Arguments.of("7b", (byte) 0x7b),
                Arguments.of("7c", (byte) 0x7c),
                Arguments.of("7d", (byte) 0x7d),
                Arguments.of("7e", (byte) 0x7e),
                Arguments.of("7f", (byte) 0x7f),
                Arguments.of("80", (byte) 0x80),
                Arguments.of("81", (byte) 0x81),
                Arguments.of("82", (byte) 0x82),
                Arguments.of("83", (byte) 0x83),
                Arguments.of("84", (byte) 0x84),
                Arguments.of("85", (byte) 0x85),
                Arguments.of("86", (byte) 0x86),
                Arguments.of("87", (byte) 0x87),
                Arguments.of("88", (byte) 0x88),
                Arguments.of("89", (byte) 0x89),
                Arguments.of("8a", (byte) 0x8a),
                Arguments.of("8b", (byte) 0x8b),
                Arguments.of("8c", (byte) 0x8c),
                Arguments.of("8d", (byte) 0x8d),
                Arguments.of("8e", (byte) 0x8e),
                Arguments.of("8f", (byte) 0x8f),
                Arguments.of("90", (byte) 0x90),
                Arguments.of("91", (byte) 0x91),
                Arguments.of("92", (byte) 0x92),
                Arguments.of("93", (byte) 0x93),
                Arguments.of("94", (byte) 0x94),
                Arguments.of("95", (byte) 0x95),
                Arguments.of("96", (byte) 0x96),
                Arguments.of("97", (byte) 0x97),
                Arguments.of("98", (byte) 0x98),
                Arguments.of("99", (byte) 0x99),
                Arguments.of("9a", (byte) 0x9a),
                Arguments.of("9b", (byte) 0x9b),
                Arguments.of("9c", (byte) 0x9c),
                Arguments.of("9d", (byte) 0x9d),
                Arguments.of("9e", (byte) 0x9e),
                Arguments.of("9f", (byte) 0x9f),
                Arguments.of("a0", (byte) 0xa0),
                Arguments.of("a1", (byte) 0xa1),
                Arguments.of("a2", (byte) 0xa2),
                Arguments.of("a3", (byte) 0xa3),
                Arguments.of("a4", (byte) 0xa4),
                Arguments.of("a5", (byte) 0xa5),
                Arguments.of("a6", (byte) 0xa6),
                Arguments.of("a7", (byte) 0xa7),
                Arguments.of("a8", (byte) 0xa8),
                Arguments.of("a9", (byte) 0xa9),
                Arguments.of("aa", (byte) 0xaa),
                Arguments.of("ab", (byte) 0xab),
                Arguments.of("ac", (byte) 0xac),
                Arguments.of("ad", (byte) 0xad),
                Arguments.of("ae", (byte) 0xae),
                Arguments.of("af", (byte) 0xaf),
                Arguments.of("b0", (byte) 0xb0),
                Arguments.of("b1", (byte) 0xb1),
                Arguments.of("b2", (byte) 0xb2),
                Arguments.of("b3", (byte) 0xb3),
                Arguments.of("b4", (byte) 0xb4),
                Arguments.of("b5", (byte) 0xb5),
                Arguments.of("b6", (byte) 0xb6),
                Arguments.of("b7", (byte) 0xb7),
                Arguments.of("b8", (byte) 0xb8),
                Arguments.of("b9", (byte) 0xb9),
                Arguments.of("ba", (byte) 0xba),
                Arguments.of("bb", (byte) 0xbb),
                Arguments.of("bc", (byte) 0xbc),
                Arguments.of("bd", (byte) 0xbd),
                Arguments.of("be", (byte) 0xbe),
                Arguments.of("bf", (byte) 0xbf),
                Arguments.of("c0", (byte) 0xc0),
                Arguments.of("c1", (byte) 0xc1),
                Arguments.of("c2", (byte) 0xc2),
                Arguments.of("c3", (byte) 0xc3),
                Arguments.of("c4", (byte) 0xc4),
                Arguments.of("c5", (byte) 0xc5),
                Arguments.of("c6", (byte) 0xc6),
                Arguments.of("c7", (byte) 0xc7),
                Arguments.of("c8", (byte) 0xc8),
                Arguments.of("c9", (byte) 0xc9),
                Arguments.of("ca", (byte) 0xca),
                Arguments.of("cb", (byte) 0xcb),
                Arguments.of("cc", (byte) 0xcc),
                Arguments.of("cd", (byte) 0xcd),
                Arguments.of("ce", (byte) 0xce),
                Arguments.of("cf", (byte) 0xcf),
                Arguments.of("d0", (byte) 0xd0),
                Arguments.of("d1", (byte) 0xd1),
                Arguments.of("d2", (byte) 0xd2),
                Arguments.of("d3", (byte) 0xd3),
                Arguments.of("d4", (byte) 0xd4),
                Arguments.of("d5", (byte) 0xd5),
                Arguments.of("d6", (byte) 0xd6),
                Arguments.of("d7", (byte) 0xd7),
                Arguments.of("d8", (byte) 0xd8),
                Arguments.of("d9", (byte) 0xd9),
                Arguments.of("da", (byte) 0xda),
                Arguments.of("db", (byte) 0xdb),
                Arguments.of("dc", (byte) 0xdc),
                Arguments.of("dd", (byte) 0xdd),
                Arguments.of("de", (byte) 0xde),
                Arguments.of("df", (byte) 0xdf),
                Arguments.of("e0", (byte) 0xe0),
                Arguments.of("e1", (byte) 0xe1),
                Arguments.of("e2", (byte) 0xe2),
                Arguments.of("e3", (byte) 0xe3),
                Arguments.of("e4", (byte) 0xe4),
                Arguments.of("e5", (byte) 0xe5),
                Arguments.of("e6", (byte) 0xe6),
                Arguments.of("e7", (byte) 0xe7),
                Arguments.of("e8", (byte) 0xe8),
                Arguments.of("e9", (byte) 0xe9),
                Arguments.of("ea", (byte) 0xea),
                Arguments.of("eb", (byte) 0xeb),
                Arguments.of("ec", (byte) 0xec),
                Arguments.of("ed", (byte) 0xed),
                Arguments.of("ee", (byte) 0xee),
                Arguments.of("ef", (byte) 0xef),
                Arguments.of("f0", (byte) 0xf0),
                Arguments.of("f1", (byte) 0xf1),
                Arguments.of("f2", (byte) 0xf2),
                Arguments.of("f3", (byte) 0xf3),
                Arguments.of("f4", (byte) 0xf4),
                Arguments.of("f5", (byte) 0xf5),
                Arguments.of("f6", (byte) 0xf6),
                Arguments.of("f7", (byte) 0xf7),
                Arguments.of("f8", (byte) 0xf8),
                Arguments.of("f9", (byte) 0xf9),
                Arguments.of("fa", (byte) 0xfa),
                Arguments.of("fb", (byte) 0xfb),
                Arguments.of("fc", (byte) 0xfc),
                Arguments.of("fd", (byte) 0xfd),
                Arguments.of("fe", (byte) 0xfe),
                Arguments.of("ff", (byte) 0xff));
    }

    @ParameterizedTest
    @MethodSource("values")
    void boh(final String hexString, final byte value) {
        assertEquals(value, ParseUtils.parseByteHex(hexString));
    }
}
